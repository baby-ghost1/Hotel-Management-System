/*
   Hotel Management Sytem
   Author : Ravi
   Date   : July 31, 2024
                           */

#include <bits/stdc++.h>
#include <fstream>
#include <iostream>
#include <string>
#include <cstdlib>
#include <iomanip>

#if defined(_WIN32) || defined(_WIN64)
#include <windows.h>
#else
#include <unistd.h>
#endif

using namespace std;

// Function to clear the console screen
void clearScreen() {
#if defined(_WIN32) || defined(_WIN64)
    system("cls");  // Windows
#else
    system("clear");  // Unix-like
#endif
}

void intro() {
    cout << "\n\n";
    cout<<"\t\t\tC++ Project On Hotel Management System\n";
    cout<<endl;
    cout<<"\t\t\t             MADE BY\n";
    cout<<"\t\t\t          RAVI PRATAP\n";
    
}


void head() {
    clearScreen();
    cout <<"\t\t\t    WELCOME\n";
    cout << "\n\t\t\tHotel Techland\n";
}

void time() {
    int i = 0;
    cout << "\n\n\t\t\t    Connecting to Server\n   \t\t\t\tData syncing";
    while (i < 10) {
        for (int j = 5; j > 4; j++) {
            if (j == 99999) {
                cout << ".";
                break;
            }
        }
        ++i;
    }
}

class Hotel {

private:
    int room_no;
    string name;
    string address;
    string phone;
    int days;
    float fare;

public:
    void main_menu();
    void add();
    void display();
    void rooms();
    void edit();
    bool check(int);
    void modify(int);
    void delete_record(int);
};

void Hotel::main_menu() {
    int choice = 0;
    while (choice != 5) {
        clearScreen();
        head();
        cout << endl;
        cout << "\n\t\t\t\t*************";
        cout << "\n\t\t\t\t* MAIN MENU *";
        cout << "\n\t\t\t\t*************";
        cout << "\n\n\n\t\t\t1.Book A Room";
        cout << "\n\t\t\t2.Customer Record";
        cout << "\n\t\t\t3.Rooms Allotted";
        cout << "\n\t\t\t4.Edit Record";
        cout << "\n\t\t\t5.Exit";
        cout << "\n\n\t\t\tEnter Your Choice: ";
        cin >> choice;

        switch (choice) {
            case 1: 
                 add(); 
                 break;

            case 2: 
                 display();
                 break;

            case 3:
                 rooms(); 
                 break;

            case 4: 
                 edit(); 
                 break;

            case 5: 
                 break;

            default: {
                cout << "\n\n\t\t\tWrong choice.....!!!";
                cout << "\n\t\t\tPress any key to continue.....!!";
                cin.get(); cin.get(); // Wait for user input
            }
        }
    }
}

void Hotel::add() {
    clearScreen();
    head();

    int r;
    bool flag;

    ofstream fout("Record.dat", ios::app | ios::binary);

    cout << "\n Enter Customer Details";
    cout << "\n ----------------------";
    cout << "\n\n Room no: ";
    cin >> r;

    flag = check(r);

    if (flag) {
        cout << "\n Sorry..!!!Room is already booked";
    } else {
        room_no = r;
        cout << " Name: ";
        cin.ignore(); // To clear newline character from buffer
        getline(cin, name);
        cout << " Address: ";
        getline(cin, address);
        cout << " Phone No: ";
        getline(cin, phone);
        cout << " No of Days to Checkout: ";
        cin >> days;
        fare = days * 900; // Default price per day
        fout.write(reinterpret_cast<char*>(this), sizeof(Hotel));
        cout << "\n Room is booked...!!!";
    }

    cout << "\n Press any key to continue.....!!";
    cin.get(); cin.get(); // Wait for user input
    fout.close();
}

void Hotel::display() {
    clearScreen();
    head();

    ifstream fin("Record.dat", ios::in | ios::binary);

    int r;

    bool flag = false;
    cout << "\n Enter room no: ";
    cin >> r;
    while (fin.read(reinterpret_cast<char*>(this), sizeof(Hotel))) {
        if (room_no == r) {
            clearScreen();
            head();
            cout << "\n Customer Details";
            cout << "\n ----------------";
            cout << "\n\n Room no: " << room_no;
            cout << "\n Name: " << name;
            cout << "\n Address: " << address;
            cout << "\n Phone no: " << phone;
            cout << "\n Days: " << days;
            cout << "\n Total Fare: " << fare;
            flag = true;
            break;
        }
    }
    if (!flag) {
        cout << "\n Sorry Room no. not found or vacant....!!";
    }
    cout << "\n\n\t\t\t\tPress any key to continue....!!";
    cin.get(); cin.get(); // Wait for user input
    fin.close();
}

void Hotel::rooms() {
    clearScreen();
    head();

    ifstream fin("Record.dat", ios::in | ios::binary);

    cout << "\n\t\t\t    List Of Rooms Allotted";
    cout << "\n\t\t\t    ----------------------";
    while (fin.read(reinterpret_cast<char*>(this), sizeof(Hotel))) {
        cout << "\n Room no: " << room_no << "\n Name: " << name;
        cout << "\n Address: " << address << "\n Phone: " << phone;
        cout << "\n Days: " << days << "\n Total: " << fare;
        cout << "\n**********************************";
    }
    cout << "\n\n\nPress any key to continue.....!!";
    cin.get(); cin.get(); // Wait for user input
    fin.close();
}

void Hotel::edit() {
    clearScreen();
    head();

    int choice, r;
    cout << "\n EDIT MENU";
    cout << "\n ---------";
    cout << "\n\n 1.Modify Customer Record";
    cout << "\n 2.Delete Customer Record";
    cout << "\n Enter your choice: ";
    cin >> choice;

    clearScreen();
    head();
    cout << "\n Enter room no: ";
    cin >> r;

    switch (choice) {
        case 1:
             modify(r);
             break;
        case 2:
             delete_record(r);
             break;
        default:
             cout << "\n Wrong Choice.....!!";
    }
    cout << "\n Press any key to continue....!!!";
    cin.get(); cin.get(); // Wait for user input
}

bool Hotel::check(int r) {
    ifstream fin("Record.dat", ios::in | ios::binary);
    while (fin.read(reinterpret_cast<char*>(this), sizeof(Hotel))) {
        if (room_no == r) {
            return true;
        }
    }
    return false;
}

void Hotel::modify(int r) {
    clearScreen();
    head();

    long pos;
    bool flag = false;
    fstream file("Record.dat", ios::in | ios::out | ios::binary);
    while (file.read(reinterpret_cast<char*>(this), sizeof(Hotel))) {
        pos = file.tellg();
        if (room_no == r) {
            cout << "\n Enter New Details";
            cout << "\n -----------------";
            cout << "\n Name: ";
            cin.ignore(); // To clear newline character from buffer
            getline(cin, name);
            cout << " Address: ";
            getline(cin, address);
            cout << " Phone no: ";
            getline(cin, phone);
            cout << " Days: ";
            cin >> days;
            fare = days * 900;
            file.seekp(pos);
            file.write(reinterpret_cast<char*>(this), sizeof(Hotel));
            cout << "\n Record is modified....!!";
            flag = true;
            break;
        }
    }
    if (!flag) {
        cout << "\n Sorry Room no. not found or vacant...!!";
    }
    file.close();
}

void Hotel::delete_record(int r) {
    clearScreen();
    head();
    char ch;
    ifstream fin("Record.dat", ios::in | ios::binary);
    ofstream fout("temp.dat", ios::out | ios::binary);
    bool flag = false;
    while (fin.read(reinterpret_cast<char*>(this), sizeof(Hotel))) {
        if (room_no == r) {
            cout << "\n Name: " << name;
            cout << "\n Address: " << address;
            cout << "\n Phone No: " << phone;
            cout << "\n Days: " << days;
            cout << "\n Total Fare: " << fare;
            cout << "\n\n Do you want to delete this record(y/n): ";
            cin >> ch;
            if (ch == 'n') {
                fout.write(reinterpret_cast<char*>(this), sizeof(Hotel));
            }
            flag = true;
            break;
        } else {
            fout.write(reinterpret_cast<char*>(this), sizeof(Hotel));
        }
    }
    fin.close();
    fout.close();
    if (!flag) {
        cout << "\n Sorry room no. not found or vacant...!!";
    } else {
        remove("Record.dat");
        rename("temp.dat", "Record.dat");
    }
}

int main() {
    Hotel h;
    clearScreen();

    cout << "\n\n\n";

    intro();
    time();

    cout << "\n\n\n\t\t\tPress any key to continue....!!";
    cin.get(); cin.get(); // Wait for user input

    clearScreen();
    head();

    string id, pass;
    cout << "\n\n\n\t\t      username : ";
    cin >> id;
    cout << "\n\t\t      password : ";
    cin >> pass;
    cout << "\n\n\n\t";
    time();
    cout << "\t";
    if (id == "admin" && pass == "******") {
        cout << "\n\n\n\tLogin Successfull";
    } else {
        cout << "\n\n\n\tINVALID CREDENTIALS!";
        cin.get(); cin.get(); // Wait for user input
        exit(EXIT_FAILURE);
    }

    clearScreen();
    h.main_menu();
    cin.get(); cin.get(); // Wait for user input
    return 0;
}
